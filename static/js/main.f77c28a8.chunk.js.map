{"version":3,"sources":["components/util/spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/Tracklist/Tracklist.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","console","log","tracks","map","id","SearchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","userID","method","body","JSON","stringify","playlistId","uris","app","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f77c28a8.chunk.js","sourcesContent":["const clientID = 'bba7a2968cb340558a6fdea4f4f82323'\nconst redirectUri = 'http://localhost:3000'\nlet accessToken\n\nconst spotify = {\n    \n    getAccessToken (){\n        if (accessToken){\n            return accessToken\n        }\n\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\n\n        if(accessTokenMatch && expiresInMatch){\n            accessToken = accessTokenMatch[1]\n            const expiresIn = Number(expiresInMatch[1])\n            window.setTimeout(() => accessToken = '', expiresIn * 1000)\n            window.history.pushState('Access Token', null, '/')\n            return accessToken\n        } else{\n            const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessURL\n        }\n    },\n    SearchBar(term){\n        const accessToken = spotify.getAccessToken()\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n        {headers: {\n            Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json()\n        }).then(jsonResponse => {\n            if(!jsonResponse.tracks){\n                return []\n            }\n          \n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }))\n        })\n    },\n    savePlaylist(name, trackUris){\n        if(!name || !trackUris){\n            return \n        }\n        const accessToken = spotify.getAccessToken()\n        const headers = {Authorization: `Bearer ${accessToken}`}\n        let userID\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userID = jsonResponse.id\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse =>{\n                const playlistId = jsonResponse.id\n                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistId}/tracks`,\n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                })\n            })\n        })\n    }\n}\n\n    \nexport default spotify\n ","import React from 'react'\n//import app from '../app/App'\nimport './SearchBar.css'\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            term: ''\n        }\n        this.search = this.search.bind(this)\n        this.handleTermChange = this.handleTermChange.bind(this)\n    }\n    search(){\n        this.props.onSearch(this.state.term)\n    }\n\n    handleTermChange(event){\n        this.setState({term: event.target.value})\n    }\n\n    render (){\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\nexport default SearchBar;","import React from 'react'\nimport './Track.css'\n\nclass Track extends React.Component {\n    constructor(props){\n        super(props)\n        this.addTrack = this.addTrack.bind(this)\n        this.removeTrack = this.removeTrack.bind(this)\n    }\n    \n    renderAction(){\n        if(this.props.isRemoval === true){\n           return <button className = \"Track-action\" onClick={this.removeTrack}>-</button>\n        }else{\n           return <button className = \"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n    \n    addTrack(){\n        this.props.onAdd(this.props.track)\n    }\n\n    removeTrack(){\n        this.props.onRemove(this.props.track)\n    }\n    \n    render(){\n        return(\n            <div className=\"Track\">\n                    <div className=\"Track-information\">\n                        <h3>{this.props.track.name}</h3>\n                        <p>{this.props.track.artist} | {this.props.track.album}</p>\n                    </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}\n\nexport default Track","import React from 'react'\nimport './Tracklist.css'\nimport Track from '../Track/Track'\n\nclass Tracklist extends React.Component {\n    render(){\n        console.log(this.props)\n        return (\n            <div className=\"TrackList\">\n                    {\n                        this.props.tracks.map(track => {\n                            return <Track track={track} \n                                          key={track.id} \n                                          onAdd={this.props.onAdd}\n                                          onRemove={this.props.onRemove}\n                                          isRemoval={this.props.isRemoval}/>\n                        })\n                    }\n            </div>\n            \n        )\n    }\n\n}\n\nexport default Tracklist","import React from 'react'\n\nimport Tracklist from '../Tracklist/Tracklist'\nimport '../SearchResults/SearchResults.css'\n\nclass SearchResults extends React.Component {\n    render(){\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <Tracklist tracks={this.props.SearchResults} onAdd={this.props.onAdd} isRemoval={false}/> \n            </div>\n        )\n    }\n}\nexport default SearchResults\n","import React from 'react'\nimport Tracklist from '../Tracklist/Tracklist'\nimport './Playlist.css'\n\n\n\nclass Playlist extends React.Component{\n    constructor(props){\n        super(props)\n        this.handleNameChange = this.handleNameChange.bind(this)\n    }\n\n    handleNameChange(event){\n        this.props.onNameChange(event.target.value)\n    }\n\n    render(){\n        return(\n            <div className=\"Playlist\">\n                <input defaultValue=\"New Playlist\" onChange={this.handleNameChange}/>\n                <Tracklist tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/> \n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\nexport default Playlist","import React from 'react'\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport Playlist from '../Playlist/Playlist'\nimport spotify from '../util/spotify.js'\n\nclass app extends React.Component{\n\n  constructor(props){\n    super(props);\n    \n    this.state = {\n\n        SearchResults:[],\n        playlistName:'myplaylist',\n        playlistTracks: [] \n      };\n          this.addTrack = this.addTrack.bind(this)\n          this.removeTrack = this.removeTrack.bind(this)\n          this.updatePlaylistName = this.updatePlaylistName.bind(this)\n          this.savePlaylist = this.savePlaylist.bind(this)\n          this.search = this.search.bind(this)\n  };\n\n  addTrack(track){\n          let tracks = this.state.playlistTracks;\n          if(tracks.find(savedTrack => savedTrack.id === track.id)){\n            return;\n      };\n      tracks.push(track)\n      this.setState({playlistTracks: tracks}) \n  };\n\n  removeTrack(track){\n          let tracks = this.state.playlistTracks;\n          tracks = tracks.filter(currentTrack => currentTrack.id !== track.id)\n          this.setState({playlistTracks: tracks})\n  };\n\n  updatePlaylistName(name){\n          this.setState({playlistName: name})\n  }\n\n  savePlaylist(){\n          const trackUris = this.state.playlistTracks.map(track => track.uri)\n          spotify.savePlaylist(this.state.playlistName, trackUris).then(()=>{\n            this.setState({\n              playlistName: 'New Playlist',\n              playlistTracks: []\n            })\n          })\n  }\n\n  search(term){\n          spotify.SearchBar(term).then(SearchResults => {\n            this.setState({SearchResults: SearchResults})\n          })\n  }\n\n\n\n  render(){\n    return (\n    <div>\n      <h1>Audio-Link</h1>\n      <div className=\"App\">\n            <SearchBar onSearch={this.search}/> \n        <div className=\"App-playlist\">\n            <SearchResults SearchResults={this.state.SearchResults} onAdd={this.addTrack}/> \n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks = {this.state.playlistTracks} \n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}\n                      /> \n        </div>\n      </div>\n    </div>\n    )\n  };\n};\n\n\nexport default app\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}